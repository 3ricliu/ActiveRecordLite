q
objects
n
values
n
params
n
step
q
cats
q
n
cat.name
cat = cats.first
cats.first.name
cat.name
cats.length
cats
n
cats
n
q
cats.first
cats
n
q
cats
n
where_line
n
step
q
self.save
self.id.nil?
self
self.id
q
self.class.table_name
self.class
q
set_line
q
set
q
c
q
columns.map(&:to_s).join(", ")
columns
column_names
q
instance.last_insert_row_id
instance.execute(*args)
instance
n
args
n
step
c
q
*attribute_values.drop(1)
attribute_values
c
q
question_marks
q
column_names
columns
question_marks
q
self.class.columns.join(", ")
self.class.columns
self.col
self
q
self.send(column)
self.send(colum)
self.send(:column)
column.send(:id)
self
column
col
column.send(self)
column.send()
column
self.class
self
q
result
n
step
q
cats
n
q
cats[0].name
cats
cat
step
hashes
n
cats.length
n
result
self.new(result)
step
results
step
q
c
self.new(result)
self.new
self
q
results
self
 q
self.class.class
self.class
self
cat
a.class
a = SQLObject.new
a = _
SQLObject.new
SQLObjec.tnew
self
self.class.methods - self.class.instance_methods
self.class.instance_methods
self.class
self
q
y
q
all_objects
q
all_objects
q
all_objects
q
n
args
q
value
col_sym
n
col_sym
step
n
params
step
n
c
c.owner_id = 2
c.attributes
c.id
q
c
q
c
n
self.attributes[:id]
column_name
q
attributes
self.attributes
self
c
cat.name
cat.something
cat
c.name
c.something
q
Cat.attributes
Cat
cat
q
@attributes
c.id
c.columns
c.instance_variables
c.name
q
c.singleton_methods
c.columns
c.name
c
q
a
q
puts a
p a
a
q
@table_name
q
@table_name
table_name
self
q
@table_name
table_name
@table_name
q
@table_name
self
@table_name
a
a = ""
a = <<-SQL SELECT * FROM #{@table_name} SQL
a = <<-SQL
DBConnection.execute2
q
self
q
rps_bot("srrr")
end
  counter == 1 ? true : false
  end
    return true if hash[key] != val
    val = hash[key] if val == nil
    counter += 1
  hash.keys.each do |key|
  counter = 0
  val = nil
def exist_max?(hash)
end
  hit_back.join("")
  end
    move_counter[move] += 1
    end
      hit_back << "x"
    else
      hit_back << counter_moves[(move_counter.max_by{ |key, value| value})[0]]
    if exist_max?(move_counter)
  moves.each_char do |move|
  move_counter = Hash.new(0)
  hit_back = []
  counter_moves = {"r" => "p", "p" => "s", "s" => "r"}
  # if one value stands out over ther est, play that
  # make a new hash
def rps_bot(moves)
q
obj.class
obj.x.class
obj.x= "yo"
obj.x = "yo"
obj.x
q
obj.x
obj
n
q
obj.:x
obj.x
obj
